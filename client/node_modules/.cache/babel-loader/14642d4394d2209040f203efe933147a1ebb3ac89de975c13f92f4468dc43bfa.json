{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  user: {\n    id: \"\",\n    username: \"\"\n  },\n  serverURL: process.env.REACT_APP_SERVER_URL,\n  loading: false,\n  error: \"\"\n};\nexport const login = createAsyncThunk('user', body => {\n  return axios.post(`${initialState.serverURL}/user/`, body, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(res => res.data);\n});\nexport const register = createAsyncThunk('user', body => {\n  if (body.username === \"\" || body.password === \"\" || body.email === \"\") return {\n    \"status\": {\n      \"code\": 400,\n      \"message\": \"Please fill all fields.\"\n    }\n  };\n  return axios.post(`${initialState.serverURL}/user/register`, body).then(res => res.data);\n});\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  extraReducers: builder => {\n    // LOGIN REDUCERS\n    builder.addCase(login.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(login.fulfilled, (state, action) => {\n      state.loading = false;\n      // Added if statement to not do anything if login failed\n      state.user = action.payload.data ? action.payload.data : state.user;\n      state.error = action.payload.status.message;\n    });\n    builder.addCase(login.rejected, (state, action) => {\n      state.loading = false;\n      state.user = {\n        id: \"\",\n        username: \"\"\n      };\n      state.error = action.error.message;\n    });\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","initialState","user","id","username","serverURL","process","env","REACT_APP_SERVER_URL","loading","error","login","body","post","headers","then","res","data","register","password","email","userSlice","name","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","status","message","rejected","reducer"],"sources":["C:/Users/-/Documents/Projects/nexchapters/src/features/user/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst initialState = {\r\n    user: {\r\n        id: \"\",\r\n        username: \"\"\r\n    },\r\n    serverURL: process.env.REACT_APP_SERVER_URL,\r\n    loading: false,\r\n    error: \"\",\r\n}\r\n\r\nexport const login = createAsyncThunk('user', (body) =>{\r\n    return axios.post(`${initialState.serverURL}/user/`, body,\r\n    {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n    })\r\n    .then(res => res.data)\r\n})\r\n\r\nexport const register = createAsyncThunk('user', (body) => {\r\n    if (body.username === \"\" || body.password === \"\" || body.email === \"\") return {\"status\": {\r\n        \"code\": 400,\r\n        \"message\": \"Please fill all fields.\"\r\n    }}\r\n    return axios.post(`${initialState.serverURL}/user/register`, body)\r\n    .then(res => res.data)\r\n})\r\n\r\nconst userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState,\r\n    extraReducers: (builder) => {\r\n        // LOGIN REDUCERS\r\n        builder.addCase(login.pending, (state) => {\r\n            state.loading = true\r\n        })\r\n        builder.addCase(login.fulfilled, (state, action) => {\r\n            state.loading = false\r\n            // Added if statement to not do anything if login failed\r\n            state.user = action.payload.data ? action.payload.data : state.user\r\n            state.error = action.payload.status.message\r\n        })\r\n        builder.addCase(login.rejected, (state, action) => {\r\n            state.loading = false\r\n            state.user = {\r\n                id: \"\",\r\n                username: \"\"\r\n            }\r\n            state.error = action.error.message\r\n        })\r\n    }\r\n})\r\n\r\nexport default userSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE;IACFC,EAAE,EAAE,EAAE;IACNC,QAAQ,EAAE;EACd,CAAC;EACDC,SAAS,EAAEC,OAAO,CAACC,GAAG,CAACC,oBAAoB;EAC3CC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGb,gBAAgB,CAAC,MAAM,EAAGc,IAAI,IAAI;EACnD,OAAOZ,KAAK,CAACa,IAAI,CAAE,GAAEZ,YAAY,CAACI,SAAU,QAAO,EAAEO,IAAI,EACzD;IACIE,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC,CACDC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;AAC1B,CAAC,CAAC;AAEF,OAAO,MAAMC,QAAQ,GAAGpB,gBAAgB,CAAC,MAAM,EAAGc,IAAI,IAAK;EACvD,IAAIA,IAAI,CAACR,QAAQ,KAAK,EAAE,IAAIQ,IAAI,CAACO,QAAQ,KAAK,EAAE,IAAIP,IAAI,CAACQ,KAAK,KAAK,EAAE,EAAE,OAAO;IAAC,QAAQ,EAAE;MACrF,MAAM,EAAE,GAAG;MACX,SAAS,EAAE;IACf;EAAC,CAAC;EACF,OAAOpB,KAAK,CAACa,IAAI,CAAE,GAAEZ,YAAY,CAACI,SAAU,gBAAe,EAAEO,IAAI,CAAC,CACjEG,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;AAC1B,CAAC,CAAC;AAEF,MAAMI,SAAS,GAAGtB,WAAW,CAAC;EAC1BuB,IAAI,EAAE,MAAM;EACZrB,YAAY;EACZsB,aAAa,EAAGC,OAAO,IAAK;IACxB;IACAA,OAAO,CAACC,OAAO,CAACd,KAAK,CAACe,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAAClB,OAAO,GAAG,IAAI;IACxB,CAAC,CAAC;IACFe,OAAO,CAACC,OAAO,CAACd,KAAK,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAAClB,OAAO,GAAG,KAAK;MACrB;MACAkB,KAAK,CAACzB,IAAI,GAAG2B,MAAM,CAACC,OAAO,CAACb,IAAI,GAAGY,MAAM,CAACC,OAAO,CAACb,IAAI,GAAGU,KAAK,CAACzB,IAAI;MACnEyB,KAAK,CAACjB,KAAK,GAAGmB,MAAM,CAACC,OAAO,CAACC,MAAM,CAACC,OAAO;IAC/C,CAAC,CAAC;IACFR,OAAO,CAACC,OAAO,CAACd,KAAK,CAACsB,QAAQ,EAAE,CAACN,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAAClB,OAAO,GAAG,KAAK;MACrBkB,KAAK,CAACzB,IAAI,GAAG;QACTC,EAAE,EAAE,EAAE;QACNC,QAAQ,EAAE;MACd,CAAC;MACDuB,KAAK,CAACjB,KAAK,GAAGmB,MAAM,CAACnB,KAAK,CAACsB,OAAO;IACtC,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEF,eAAeX,SAAS,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}